import sequelize from "../Models/index.js";
import initModels from "../Models/init-models.js";
import { Sequelize } from "sequelize";

const Op = Sequelize.Op;

const model = initModels(sequelize);

// R => get all
const getUser = async (req, res) => {
  // b·∫•t ƒë·ªìng b·ªô => asynchronous
  // SELECT * FROM user WHERE user_id = 1 => list object => [{},{}]
  let data = await model.user.findAll(); // => Read

  // SELECT * FROM user JOIN

  // data = await model.restaurant.findAll({
  //     include: ["user_id_users"]
  // });

  res.send(data);
};

// R => get by id

const getUserById = async (req, res) => {
  let { id } = req.params;

  // SELECT * FROM user WHERE user_id=1 LIMIT 1 => object => {}
  let data = await model.user.findOne({
    where: { user_id: id },
  }); // => Read

  res.send(data);
};

// CUD
const createUser = async (req, res) => {
  try {
    let { full_name, email, pass_word } = req.body;

    let checkEmail = await model.user.findAll({
      where: {
        email,
      },
    });

    if (checkEmail.length > 0) {
      res.send("Email ƒë√£ t·ªìn t·∫°i !");
      return;
    }

    let newData = {
      full_name,
      email,
      pass_word,
    };
    await model.user.create(newData);

    res.send("th√™m m·ªõi th√†nh c√¥ng !");
  } catch (exp) {
    console.log(exp);
    res.status(500).send("L·ªói BE");
  }
};
const updateUser = async (req, res) => {
  let { id } = req.params;
  let { full_name, email, pass_word } = req.body;

  //check tr√πng email

  await model.user.update(
    { full_name, email, pass_word },
    {
      where: { user_id: id },
    }
  );

  res.send("C·∫≠p nh·∫≠t th√†nh c√¥ng !");
};
const deleteUser = async (req, res) => {
  let { id } = req.params;

  // DELETE FROM user WHERE user_id = ... ;
  await model.user.destroy({ where: { user_id: id } });
  res.send("X√≥a th√†nh c√¥ng !");
};

const getUserByName = async (req, res) => {
  // let [data, metadata] = await sequelize.query("SELECT * FROM user");

  let { fullName } = req.params;
  // SELECT * FROM user WHERE full_name LIKE '%...%'
  let data = await model.user.findAll({
    where: {
      full_name: {
        [Op.like]: `%${fullName}%`,
      },
    },
  });

  res.send(data);
};

// ==================================================
// B√†i t·∫≠p sequelize
// ==================================================
// LIKE RES
const userLikeRes = async (req, res) => {
  try {
    let { id } = req.params;
    let { res_id, date_like } = req.body;
    let data = await model.like_res.findOne({
      where: {
        user_id: id,
        res_id: res_id,
      },
    });

    if (data !== null) {
      // Ki·ªÉm tra object c√≥ null hay kh√¥ng
      res.send("Nh√† h√†ng n√†y ƒë√£ ƒë∆∞·ª£c like tr∆∞·ªõc ƒë√≥ !");
      return;
    }

    await model.like_res.create({ user_id: id, res_id, date_like });
    res.status(201).send("Th√™m m·ªõi th√†nh c√¥ng !");
  } catch (exp) {
    // exp: exception
    console.log("üöÄ ~ file: userController.js:129 ~ userLikeRes ~ exp:", exp);
    // res.status(500).send(exp.message);
    res.status(500).send("L·ªói BE");
  }
};

// UNLIKE RES
const userUnLikeRes = async (req, res) => {
  try {
    let { id } = req.params;
    let { res_id } = req.body;
    let data = await model.like_res.findOne({
      where: {
        user_id: id,
        res_id: res_id,
      },
    });

    if (data === null) {
      // Ki·ªÉm tra object c√≥ null hay kh√¥ng
      res.send("Nh√† h√†ng n√†y ƒë√£ ƒë∆∞·ª£c unlike tr∆∞·ªõc ƒë√≥");
      return;
    }

    await model.like_res.destroy({
      where: {
        user_id: id,
        res_id: res_id,
      },
    });
    res.status(200).send("Unlike th√†nh c√¥ng");
  } catch (exp) {
    // exp: exception
    console.log("üöÄ ~ file: userController.js:162 ~ userUnLikeRes ~ exp:", exp);
    // res.status(500).send(exp.message);
    res.status(500).send("L·ªói BE");
  }
};

// L·∫§Y DANH S√ÅCH LIKE NH√Ä H√ÄNG THEO USER_ID
const getListUserLikeResById = async (req, res) => {
  try {
    let { id } = req.params;

    // let data = await model.restaurant.findAll({
    let data = await model.user.findOne({
      where: { user_id: id },
      include: ["res_id_restaurants"],
      // where: { res_id: id },
      // include: ["user_id_users"]
    });
    if (data === null) {
      res.send("Id ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i !");
      return;
    }
    if (data.res_id_restaurants.length === 0) {
      res.send("Ng∆∞·ªùi d√πng n√†y ch∆∞a like nh√† h√†ng n√†o");
      return;
    }

    res.status(200).send(data);
  } catch (exp) {
    // exp: exception
    console.log("üöÄ ~ file: userController.js:189 ~ exp:", exp);
    // res.status(500).send(exp.message);
    res.status(500).send("L·ªói BE");
  }
};

// RATE RES
const userRateRes = async (req, res) => {
  try {
    let { id } = req.params;
    let { res_id, amount, date_rate } = req.body;

    let data = await model.rate_res.findOne({
      where: {
        user_id: id,
        res_id: res_id,
      },
    });

    if (data !== null) {
      // Ki·ªÉm tra nh√† h√†ng ƒë√£ ƒë∆∞·ª£c ƒë√°nh gi√° s·ªë sao tr∆∞·ªõc ƒë√≥ hay ch∆∞a
      res.send("Nh√† h√†ng n√†y ƒë√£ ƒë∆∞·ª£c ƒë√°nh gi√° tr∆∞·ªõc ƒë√≥ !");
      return;
    }

    await model.rate_res.create({ user_id: id, res_id, amount, date_rate });
    res.status(201).send("ƒê√°nh gi√° th√†nh c√¥ng !");
  } catch (exp) {
    console.log("üöÄ ~ file: userController.js:218 ~ userRateRes ~ exp:", exp);
    // res.status(500).send(exp.message);
    res.status(500).send("L·ªói BE");
  }
};

// DELETE RATE RES
const userDeleteRateRes = async (req, res) => {
  try {
    let { id } = req.params;
    let { res_id } = req.body;
    let data = await model.rate_res.findOne({
      where: {
        user_id: id,
        res_id: res_id,
      },
    });

    if (data === null) {
      res.send("Nh√† h√†ng n√†y ch∆∞a ƒë∆∞·ª£c ƒë√°nh gi√° tr∆∞·ªõc ƒë√≥ !");
      return;
    }

    await model.rate_res.destroy({
      where: {
        user_id: id,
        res_id: res_id,
      },
    });
    res.status(200).send("X√≥a ƒë√°nh gi√° th√†nh c√¥ng");
  } catch (exp) {
    console.log(
      "üöÄ ~ file: userController.js:249 ~ userDeleteRateRes ~ exp:",
      exp
    );
    // res.status(500).send(exp.message);
    res.status(500).send("L·ªói BE");
  }
};

// L·∫§Y DANH S√ÅCH ƒê√ÅNH GI√Å NH√Ä H√ÄNG THEO USER_ID
const getListUserRateResById = async (req, res) => {
  try {
    let { id } = req.params;
    let data = await model.user.findOne({
      where: { user_id: id },
      include: ["res_id_restaurant_rate_res"],
    });

    if (data === null) {
      res.send("Id ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i !");
      return;
    }
    if (data.res_id_restaurant_rate_res.length === 0) {
      res.send("Ng∆∞·ªùi d√πng n√†y ch∆∞a ƒë√°nh gi√° nh√† h√†ng n√†o");
      return;
    }

    res.status(200).send(data);
  } catch (exp) {
    console.log(
      "üöÄ ~ file: userController.js:271 ~ getListUserRateResById ~ exp:",
      exp
    );
    // res.status(500).send(exp.message);
    res.status(500).send("L·ªói BE");
  }
};

// USER ƒê·∫∂T M√ìN ---> USER 1 M√ìN
const orderById = async (req, res) => {
  try {
    let { id } = req.params;
    let { food_id, amount, arr_sub_id } = req.body;
    let data = await model.order.findOne({
      where: {
        user_id: id,
        food_id: food_id,
      },
    });

    if (data !== null) {
      res.send("Ng∆∞·ªùi d√πng ƒë√£ ƒë·∫∑t m√≥n n√†y r·ªìi !");
      return;
    }

    await model.order.create({ user_id: id, food_id, amount, arr_sub_id });
    res.status(201).send("Th√™m m·ªõi th√†nh c√¥ng !");
  } catch (exp) {
    console.log("üöÄ ~ file: userController.js:310 ~ orderById ~ exp:", exp);
    res.status(500).send("L·ªói BE");
  }
};

// X√ìA ƒê·∫∂T M√ìN
const deleteOrderById = async (req, res) => {
  let { id } = req.params;
  let { food_id } = req.body;
  let data = await model.order.findOne({
    where: {
      user_id: id,
      food_id: food_id,
    },
  });
  if (data === null) {
    res.send("Ng∆∞·ªùi d√πng ch∆∞a ƒë·∫∑t m√≥n n√†y n√™n kh√¥ng th·ªÉ x√≥a !");
    return;
  }
  await model.order.destroy({
    where: {
      user_id: id,
      food_id: food_id,
    },
  });
  res.status(200).send("X√≥a ƒë·∫∑t m√≥n th√†nh c√¥ng");
};

export {
  getUser,
  getUserById,
  createUser,
  updateUser,
  deleteUser,
  getUserByName,
  userLikeRes,
  userUnLikeRes,
  getListUserLikeResById,
  userRateRes,
  userDeleteRateRes,
  getListUserRateResById,
  orderById,
  deleteOrderById,
};
